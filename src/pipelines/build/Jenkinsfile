pipeline {
  agent any
  stages {
    stage('GitHub Pull') {
	  	steps {
		  	sh 'echo "*************************GitHub Pull*************************"'
			  script {
				  checkout([$class: 'GitSCM',
   		   	  branches: [[name: '*/master']],
    			  doGenerateSubmoduleConfigurations: false,
    			  extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "rlennon/doodle/src"]],
    			  submoduleCfg: [],
   			    userRemoteConfigs: [[url: 'git@github.com:rlennon/doodle']]
    		  ])
			  }
		  }
	  }
	stage('Package Prep') {
	 	steps {
		  	sh '''
			  	echo "*************************Staging package*************************"
				cd ${WORKSPACE}
				mkdir package
				cd ${WORKSPACE}/rlennon/doodle/src/src
				mv services ${WORKSPACE}/package
				mv ui ${WORKSPACE}/package
				mv requirements.txt ${WORKSPACE}/package
				mv config.json ${WORKSPACE}/package
				cd ${WORKSPACE}/package
				touch doodle_build-${BUILD_NUMBER}.txt
				ls -ltr
			'''
  		}
	}
  	stage('Code Coverage Testing - Python Builder') {
  		steps {
			 sh '''
<<<<<<< HEAD
			 	echo "*************************Running Nosetests with Python Builder*************************"
				if [ -n "${WORKSPACE:+1}" ]; then
    				  # Path to virtualenv cmd installed by pip
    				  # /usr/local/bin/virtualenv
    				  PATH=$WORKSPACE/venv/bin:/usr/local/bin:$PATH
    				  if [ ! -d "venv" ]; then
            			    virtualenv -p python3 venv
    				  fi
    				  . venv/bin/activate
				fi
				pip install -r ${WORKSPACE}/rlennon/doodle/src/src/pipelines/build/requirements.txt 
				cd ${WORKSPACE}/package
				nosetests --with-coverage --cover-package=services
				pylint --disable=C0103 services/api.py || exit 0
			'''
		  }	
=======
			 			echo "*************************Running Nosetests with Python Builder*************************"
						if [ -n "${WORKSPACE:+1}" ]; then
    						  # Path to virtualenv cmd installed by pip
    						  # /usr/local/bin/virtualenv
    						  PATH=$WORKSPACE/venv/bin:/usr/local/bin:$PATH
    						  if [ ! -d "venv" ]; then
            					    virtualenv -p python3 venv
    						  fi
    						  . venv/bin/activate
						fi
						pip install -r ${WORKSPACE}/rlennon/doodle/src/src/pipelines/build/requirements.txt
						cd ${WORKSPACE}/package
						nosetests --with-coverage --cover-package=services
						pylint --disable=C0103 services/api.py || exit 0
					'''
		  }
>>>>>>> master
	  }
	stage('Static Code Analysis') {
	  	steps {
		  sh '''
				echo "*************************Static Code Analysis*************************"
				sh /usr/local/bin/sonar-scanner -Dsonar.host.url=${SONARQUBE_SERVER}:${SONARQUBE_PORT} -Dsonar.login=b310a502e3031486c0a9626c9e03a4b0be4715a7 -Dsonar.projectName=Doodle -Dsonar.projectKey=DoodleTest -Dsonar.sources=${WORKSPACE}/src
		  '''
	  	}	
	  }
	stage('Build/Tar Package') {
	  	steps {
		  sh '''
<<<<<<< HEAD
				echo "*************************Build/Tar Package*************************"
				cd ${WORKSPACE}
				tar -cvf doodle_build-${BUILD_NUMBER}.tar ${WORKSPACE}/package/*
				ls -ltr
		  '''
	  	}	
=======
						echo "*************************Build/Tar Package*************************"
						cd ${WORKSPACE}/package
						tar -cvf ${WORKSPACE}/doodle_build-${BUILD_NUMBER}.tar *
						ls -ltr
				  '''
	  	}
>>>>>>> master
	  }
  	stage('Artifactory Load') {
  		steps {
			sh '''
<<<<<<< HEAD
				echo "*************************Artifactory Load*************************"
				echo "curl command pushes new build package into artifactory"
				curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -X PUT "${ARTIFACTORY_SERVER}:${ARTIFACTORY_PORT}/artifactory/doodle-release-local/com/doodle/build/doodle_build-${BUILD_NUMBER}/doodle_build-${BUILD_NUMBER}.tar" -T ${WORKSPACE}/doodle_build-${BUILD_NUMBER}.tar
			    rm ${WORKSPACE}/doodle_build-${BUILD_NUMBER}.tar
		'''
		}	
=======
					echo "*************************Artifactory Load*************************"
					echo "curl command pushes new build package into artifactory"
					curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -X PUT "${ARTIFACTORY_SERVER}:${ARTIFACTORY_PORT}/artifactory/doodle-release-local/com/doodle/build/doodle_build-${BUILD_NUMBER}/doodle_build-${BUILD_NUMBER}.tar" -T ${WORKSPACE}/doodle_build-${BUILD_NUMBER}.tar
		  		    rm ${WORKSPACE}/doodle_build-${BUILD_NUMBER}.tar
				'''
		}
>>>>>>> master
	  }
  }
	post {
		success {
			build job: 'Deploy_Staging', parameters: [string(name: 'DOODLE_BUILD_JOB_BUILD_NUMBER', value: "${BUILD_NUMBER}")], wait: false
		}
		always {
			cleanWs()
		}
	}
}
