pipeline {
  agent any
	parameters {
			  string(defaultValue: '', description: '', name: 'DOODLE_BUILD_JOB_BUILD_NUMBER')
	}
  stages {
    stage('GitHub Pull') {
      steps {
        sh 'echo "*************************GitHub Pull*************************"'
        script {
          checkout([$class: 'GitSCM',
            branches: [[name: '*/master']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "rlennon/doodle/src"]],
            submoduleCfg: [],
            userRemoteConfigs: [[url: 'git@github.com:rlennon/doodle']]
          ])
        }
      }
    }
    stage('Deploy to production') {
      steps {
        sh 'echo "*************************Deploy Staging*************************"'
        sh 'ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook --tags=deploy --extra-vars "artifactory_build_url=${ARTIFACTORY_SERVER}:${ARTIFACTORY_PORT}/artifactory/doodle-release-local/com/doodle/build/doodle_build-${DOODLE_BUILD_JOB_BUILD_NUMBER}/doodle_build-${DOODLE_BUILD_JOB_BUILD_NUMBER}.tar" -u doodle -i ~/hosts-prod.ini ${WORKSPACE}/src/infra/ansible/site.yml'
      }
    }
    stage('Deployment Validation Test') {
      steps {
        sh 'echo "*************************Smoke Test*************************"'
      }
    }
    stage('Security Scanning') {
	  	steps {
		  	sh '''
			  echo "*************************Running Security scan for open ports*************************"
			  if [ -n "${WORKSPACE:+1}" ]; then
    		 	# Path to virtualenv cmd installed by pip
    			# /usr/local/bin/virtualenv
    			PATH=$WORKSPACE/venv/bin:/usr/local/bin:$PATH
    			if [ ! -d "venv" ]; then
            	    virtualenv -p python3 venv
    			fi
    			    . venv/bin/activate
			  fi
			  python3 ./vars/Production_security_port_scanning.py
		    '''
			}
		}
  }
	post {
		always {
			cleanWs()
		}
	}
}
