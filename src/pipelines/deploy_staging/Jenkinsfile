pipeline {
  agent any
	parameters {
			  string(defaultValue: '', description: '', name: 'DOODLE_BUILD_JOB_BUILD_NUMBER')
	}	
  stages {
    stage('Artifactory Pull') {
	  	steps {
		  	sh '''
					echo "*************************Artifactory Pull*************************"
					curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} "http://172.28.25.122:8081/artifactory/doodle-release-local/com/doodle/build/doodle_build-${DOODLE_BUILD_JOB_BUILD_NUMBER}/doodle_build-${DOODLE_BUILD_JOB_BUILD_NUMBER}.tar" -o ${WORKSPACE}/doodle_build-${DOODLE_BUILD_JOB_BUILD_NUMBER}.tar
				  ls -ltr
				'''
		  }	
	  }
		stage('Test connection to Staging API Server') {
  		steps {
			  sh 'echo "*************************Transfer to Target Server*************************"'
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Doodle-API-Staging', transfers: [sshTransfer(cleanRemote: false, 
						excludes: '', 
						execCommand: '''
													cd /home/doodle/Doodle/src/
													ls -ltr
													''', 
						execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
						remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', 
						sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
 		  }	
		}
		stage('Test connection to Staging UI Server') {
  		steps {
			  sh 'echo "*************************Transfer to Target Server*************************"'
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Doodle-UI-Staging', transfers: [sshTransfer(cleanRemote: false, 
						excludes: '', 
						execCommand: '''
													cd /home/doodle/Doodle/src/
													ls -ltr
													''', 
						execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
						remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', 
						sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
 		  }	
		}
  	stage('Deployment Validation Test') {
  		steps {
			  sh 'echo "*************************Smoke Test*************************"'
 		  }	
	  }
		stage('Security Test Placeholder') {
  		steps {
			  sh 'echo "*************************Security Test Placeholder*************************"'
 		  }	
	  }
  }
	post {
		success {
			build job: 'Deploy_Production', parameters: [string(name: 'DOODLE_BUILD_JOB_BUILD_NUMBER', value: "${BUILD_NUMBER}")], wait: false
		}	
		always {
			cleanWs() 
		}
	}
}
